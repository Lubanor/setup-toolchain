" Quite Personal Vim Setup
"

" ln -s ~/.vim/vimrc ~/.vimrc
" "  cd ~/.vim/
" md -p ~/.vim/plugged/          # vim-plug 插件目录
" md -p ~/.vim/undodir/          # 持久撤销目录
" md -p ~/.vim/colors/           # 自定义配色
" md -p ~/.vim/ftplugin/         # 文件类型配置
" md -p ~/.vim/plugin/           # 本地插件
" md -p ~/.vim/autoload/         # 自动加载脚本

" `coc.nvim`：提供完整的 LSP 支持（比 `nvim-lspconfig` 更强大，适用于 Vim）
" `vimwiki`：构建个人知识库
" `nerdtree` 或 `vim-devicons`：增强文件浏览器体验
" `fzf.vim`：模糊搜索文件/行/缓冲区
" `auto-pairs`：更智能的括号补全
" `undotree`：可视化撤销历史

"
"=============================================================================
" => 初始化与基础设置
"=============================================================================

" 禁用兼容模式
set nocompatible

" 设置 shell 为 /bin/sh
set shell=/bin/sh

" 增加历史记录长度
set history=1000

" 启用文件类型检测、插件和缩进
filetype plugin indent on

" 自动检测外部修改
set autoread

" 设置 <leader> 键为 空格
let mapleader = " "
let g:mapleader = " "

"=============================================================================
" => 插件管理器：vim-plug
"=============================================================================

"  call plug#begin()
"
"  " 更好的重复操作支持
"  Plug 'tpope/vim-repeat'
"  Plug 'tpope/vim-surround'
"
"  " 用户界面增强
"  Plug 'reedes/vim-colors-pencil'
"  Plug 'Yggdroot/indentLine'
"  Plug 'vim-airline/vim-airline'
"
"  " 启动界面
"  Plug 'mhinz/vim-startify'
"
"  " 剪贴板支持
"  Plug 'christoomey/vim-system-copy'
"
"  " 自动补全与提示
"  Plug 'ervandew/supertab'
"
"  " 语法检查
"  Plug 'scrooloose/syntastic'
"
"  " LSP 支持（Neovim 原生，Vim 通过插件模拟）
"  Plug 'neovim/nvim-lspconfig'
"  Plug 'williamboman/nvim-lsp-installer'
"
"  " TreeSitter（语法高亮）
"  Plug 'nvim-treesitter/nvim-treesitter'
"
"  " Python 支持
"  Plug 'klen/python-mode'
"
"  call plug#end()

"=============================================================================
" => 插件配置
"=============================================================================

" Supertab
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabCrMapping             = 0

" Syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Python Mode
let g:pymode_rope_lookup_project = 0
let g:pymode_rope = 0

" 禁用剪贴板默认映射
let g:copy_cut_paste_no_mappings = 1

" 鼠标行为
set mousemodel=popup

" 启用语法高亮
syntax enable

"=============================================================================
" => 编辑行为优化
"=============================================================================

" 折叠设置
set foldmethod=indent
set foldlevel=10

" 行断开与换行
set linebreak
set textwidth=0
set wrapmargin=0

" 命令行补全
set wildmenu
set wildmode=longest:full,full

" 列表格式识别
set formatlistpat=^\\s*\\(\\d\\\|[-*]\\)\\+[\\]:.)}\\t\ ]\\s*
set formatoptions+=n

" 显示不可见字符
set list
set listchars=tab:\|\ ,trail:·,extends:#,nbsp:.

" 更好的单词识别
set iskeyword+=_,@

" 缩进对齐优化
set shiftround

" 缓冲区切换优化
set switchbuf=useopen,usetab,newtab
set stal=2

" 启用自动换行
set wrap
set whichwrap+=<,>,[,],h,l,b,s,~

" 隐藏未保存缓冲区切换
set hid

" 忽略大小写搜索
set ignorecase

" 智能大小写识别
set smartcase

" 高亮搜索
set hlsearch

" 增量搜索
set incsearch

" 禁止重绘延迟
set lazyredraw

" 正则表达式兼容
set magic

" 确认操作
set confirm

" 默认全局替换
set gdefault

" 补全选项
set completeopt=noinsert,menuone,noselect

" 剪贴板支持（现代终端）
set clipboard+=unnamedplus

" 缩进设置
set expandtab
set shiftwidth=4
set tabstop=4

" 匹配括号
set showmatch
set mat=10

" 快捷键延迟
set timeoutlen=1000

" 禁用错误提示音
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" 折叠列
set foldcolumn=3

" 字间距（GUI）
set linespace=10

" 显示命令
set showcmd

" 滚动偏移
set scrolloff=3

" 显示光标位置
set ruler

" 显示行号
set number

" 高亮当前行
set cursorline
set cursorcolumn

" 命令行高度
set cmdheight=2

" 真彩色支持（终端） desert slate pencil
let $VIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme desert
set t_ut=
set background=dark

" GUI 设置
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" 终端颜色支持
if has("termguicolors")
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
endif

" 色列
set colorcolumn=+1
hi ColorColumn NONE ctermbg=Cyan

" 字体（GUI）
set guifont=Hack\ 16

" 状态栏
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set laststatus=2

" 自动切换当前目录
set autochdir

" 浏览路径
set browsedir=buffer

" 文件格式
set ffs=unix,dos,mac

" 忽略文件
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

" 编码设置
set encoding=utf8
set termencoding=utf8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

language messages zh_CN.utf-8

set fileencodings=utf8,gbk,big5,ucs-bom

" 回到上次位置
autocmd BufReadPost *
    \ exec ":call UpdateCopyright()" |
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal! g`\"" |
    \ exe "normal! zz" |
    \ endif

" 自动保存前处理
autocmd BufWritePre *
    \ exec ":call UpdateCopyright()" |
    \ exec ":call DeleteTrailingWS()" |
    \ let &backupext = '.-' . strftime("%Y%m%d-%H%M%S")

" 自动补全设置
set omnifunc=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType perl set omnifunc=perlcomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType node set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType cpp set omnifunc=cppcomplete#Complete
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType d set omnifunc=ccomplete#Complete
autocmd Filetype octave set omnifunc=syntaxcomplete#Complete
autocmd FileType go set omnifunc=gocomplete#Complete

" 注释符号
autocmd FileType *                   let b:comment_leader = '// '
autocmd FileType c,d,cpp,java,scala  let b:comment_leader = '// '
autocmd FileType sh,ruby,python,text let b:comment_leader = '#  '
autocmd FileType conf,fstab,perl     let b:comment_leader = '#  '
autocmd FileType tex,octave          let b:comment_leader = '%  '
autocmd FileType mail                let b:comment_leader = '>  '
autocmd FileType vim                 let b:comment_leader = '"  '
autocmd FileType lisp                let b:comment_leader = ';; '
autocmd FileType haskell,vhdl,ada    let b:comment_leader = '-- '

"=============================================================================
" => 快捷键映射
"=============================================================================

" 移动优化
nnoremap k gk
nnoremap j gj
nnoremap <Down> gj
nnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" 注释
noremap \ :1,$s/%/ic

" 清除高亮
noremap <silent> <leader>/ :noh<CR>

" 替换模式
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" 关闭当前 buffer
command! Bclose call <SID>BufcloseCloseIt()

" 新建标签页打开当前文件
noremap <leader><CR> :tabedit <c-r>=expand("%:p:h")<CR>/

" 用 sudo 保存
command! W w !sudo tee % > /dev/null

" 切换当前目录到文件所在目录
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" 移动行
nnoremap <M-j> mz:m+<CR>`z
nnoremap <M-k> mz:m-2<CR>`z
vnoremap <M-j> :m'>+<CR>`<my`>mzgv`yo`z
vnoremap <M-k> :m'<-2<CR>`>my`<mzgv`yo`z

" 删除尾空格
noremap <leader><BS> :%s/\s\+$//ge<CR>

" 运行 Python 文件
au FileType python let g:pymode_run_bind = "<F5>"

" 拼写检查切换
noremap <F6> :setlocal spell!<CR>

" 主题切换
nnoremap <F8>   :set background=light<CR>
nnoremap <S-F8> :set background=dark<CR>

" 添加分隔线
noremap <F11> 2o<ESC>k:call AddPartingLine()<CR>j

" 添加版权信息
noremap <F12> :call AddCopyright()<CR>:call ProcessEnv()<CR>

" 删除优化
vnoremap <BS> d
inoremap <C-BS> <C-W>
inoremap <C-Del> <C-O>dw

" 快捷保存
noremap  <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" 关闭窗口
noremap  <C-F4> <C-W>c
inoremap <C-F4> <C-O><C-W>c
cnoremap <C-F4> <C-C><C-W>c
onoremap <C-F4> <C-C><C-W>c

" 窗口切换
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" 快捷退出插入模式
noremap  <C-G> <Esc>
vnoremap <C-G> <Esc>
snoremap <C-G> <Esc>
inoremap <C-G> <Esc>
cnoremap <C-G> <Esc>

" 快捷进入命令模式
noremap  <C-Z> :
vnoremap <C-Z> :
snoremap <C-Z> :
inoremap <C-Z> <C-O>:

" 快捷复制
map Y y$

" 粘贴后保持原内容
xnoremap p pgvy
xnoremap P Pgvy

" 粘贴模式切换
map <leader>pp :setlocal paste!<cr>

" 快捷命令
noremap ; :
noremap ;; ;

" 自动括号插入
inoremap <space>( ()<esc>i
inoremap <space>[ []<esc>i
inoremap <space>{ {}<esc>i
inoremap <space>' ''<esc>i
inoremap <space>" ""<esc>i
inoremap <space>` ``<esc>i
inoremap <space>$ $$<esc>i
inoremap <space>\| \|\|<esc>i

" 自动括号闭合
inoremap <expr> <silent> ( MayCloseParentheses('(')
inoremap <expr> <silent> [ MayCloseParentheses('[')
inoremap <expr> <silent> { MayCloseParentheses('{')

" 插入当前时间
iab xdate <c-r>=strftime("%Y/%m/%d %H:%M:%S")<cr>

"=============================================================================
" => 自定义函数
"=============================================================================

function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")
    if buflisted(l:alternateBufNum)
      buffer #
    else
      bnext
    endif
    if bufnr("%") == l:currentBufNum
      new
    endif
    if buflisted(l:currentBufNum)
      execute("bdelete! ".l:currentBufNum)
    endif
endfunction

function! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunction

function! MayCloseParentheses(cmd)
    if col('.') == col('$')
        if a:cmd == '('
            return "()\<Left>"
        elseif a:cmd == '{'
            return "{}\<Left>"
        elseif a:cmd == '['
            return "[]\<Left>"
        endif
    else
        if a:cmd == '('
            return "("
        elseif a:cmd == '['
            return "["
        elseif a:cmd == '{'
            return "{"
        endif
    endif
endfunction

function! AddPartingLine()
    call append(line('.'), b:comment_leader . "· <=>---<=> · <=>---<=> · <=>---<=> · <=>---<=> · <=>---<=> · <=>---<=>")
endfunction

function! AddCopyright()
    call append(0, b:comment_leader . "==============================================")
    call append(1, b:comment_leader . "·")
    call append(8, b:comment_leader . "· COPYRIGHT ".strftime("%Y"))
    call append(9, b:comment_leader . "·")
    call append(10, b:comment_leader . "· This is the description.")
    call append(11, b:comment_leader . "·")
    call append(13, "")
    echohl WarningMsg | echo "copyright information added." | echohl None
endfunction

function! UpdateCopyright()
    let n=1
    while n < 20
        let line = getline(n)
        if line =~ '\s*\S*COPYRIGHT\S*.*$'
            if line !~ strftime("%Y")
                exe "g#\\cCOPYRIGHT \\(".strftime("%Y")."\\)\\@![0-9]\\{4\\}\\(-".strftime("%Y")."\\)\\@!#s#\\([0-9]\\{4\\}\\)\\(-[0-9]\\{4\\}\\)\\?#\\1-".strftime("%Y")
            endif
            echohl WarningMsg | echo "copyright information updated." | echohl None
            return
        endif
        let n = n + 1
    endwhile
    echohl WarningMsg | echo "no copyright information found." | echohl None
endfunction

function! ProcessEnv()
    let n=1
    while n < 3
        let line = getline(n)
        if line =~ '^\s*#\s*env'
            let path = expand('%:p:h')
            let name = expand('%:t')
            let new_line = substitute(line, 'env', 'env: ' . path . '/' . name, '')
            call setline(n, new_line)
            return
        endif
        let n = n + 1
    endwhile
endfunction
